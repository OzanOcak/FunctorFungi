[{"content":"I have build my first mobile app with React Native top of Expo framework. I have used Redux for state management and Tailwind for User Interface design. I have published it on Google Store. You can ger the app here\nBislingo ✓ Development: Developing your own vocabulary base on your interest help you master at language faster.\n✓ Entertaintment: Games can make it easier to learn educational contents and develop cognitive skills.\n✓ Interactivity: Quizzes help you identify what you know and what you don\u0026rsquo;t know\n✓ Entertaintment: Games can make it easier to learn educational contents and develop cognitive skills.\nNot just a regular dictionary app. You can build your own dictionary as you like. You can use it for any language you want. Moreover BisLingo has its own quiz builder that can produce random questions with your own entries and you can also practice your knowledge by playing hangman.\nI believe that BisLingo will revolutionize the way you learning language, and I can\u0026rsquo;t wait for you to try it out for yourself. Download it now and experience the convenience and ease of BisLingo. Thank you for your support, and please don\u0026rsquo;t hesitate to contact us with any questions or feedback. Sincerely, The developer of Bislingo\n","permalink":"http://localhost:1313/projects/building-mobile-app-with-expo-and-react-native/","summary":"I have build my first mobile app with React Native top of Expo framework. I have used Redux for state management and Tailwind for User Interface design. I have published it on Google Store. You can ger the app here\nBislingo ✓ Development: Developing your own vocabulary base on your interest help you master at language faster.\n✓ Entertaintment: Games can make it easier to learn educational contents and develop cognitive skills.","title":"Building Mobile App With Expo and React Native"},{"content":"I have built my personal website with Next framwork and React library, you can visit my website at oocak.com\nReact and Next.js are a great combination for building modern web applications. Here\u0026rsquo;s why they make a perfect couple and a tutorial on how to set up a Next.js app with a simple React user interface.\nReact and Next.js 1. Server-side Rendering (SSR): Next.js provides server-side rendering out of the box, which can improve the initial load time and search engine optimization (SEO) of your application, as opposed to a purely client-side React application.\n2. Static Site Generation (SSG): Next.js allows you to pre-render pages at build-time, creating highly performant \u0026ldquo;static\u0026rdquo; pages that can be served directly from a CDN.\n3. Routing and File-based Routing: Next.js has a file-based routing system, which makes it easy to set up and maintain the navigation structure of your application.\n4. Automatic Code Splitting: Next.js automatically splits your application\u0026rsquo;s code, reducing the amount of JavaScript that needs to be downloaded on each page load.\n5. Image Optimization: Next.js provides built-in image optimization, which can significantly improve the performance of your application.\n6. Seamless Integration with React: Next.js is built on top of React, so you can leverage all the power and flexibility of the React ecosystem. Tutorial: Setting up a Next.js App with a Simple React User Interface\nbrew install node npx create-next-app my-app This will create a new directory called my-app with the necessary files and folders for a Next.js application.\nDevelop the React User Interface: Next.js uses the pages directory to define your application\u0026rsquo;s routes. Open the pages directory and create a new file called index.js. In this file, you can build your React user interface:\nimport React from \u0026#39;react\u0026#39;; const HomePage = () =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Welcome to my Next.js App\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This is a simple React user interface built with Next.js.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); }; export default HomePage; Run the Development Server: In your terminal, navigate to the my-app directory and run the following command to start the development server:\nnpm run dev This will start the Next.js development server and open your application in your default web browser.\nStatic Site Generation: Create pre-rendered pages at build-time using the getStaticProps or getStaticPaths functions.\nServer-side Rendering: Render pages on the server using the getServerSideProps function.\nAPI Routes: Create serverless API routes using the pages/api directory.\nStyling: Integrate CSS, Sass, or other styling solutions into your Next.js application.\nDeployment: Deploy your Next.js app to popular hosting platforms like Vercel, Netlify, or AWS. By combining the power of React and the features of Next.js, you can create high-performance, scalable web applications with a seamless user experience.\n","permalink":"http://localhost:1313/projects/building-personal-website-with-next-and-react/","summary":"I have built my personal website with Next framwork and React library, you can visit my website at oocak.com\nReact and Next.js are a great combination for building modern web applications. Here\u0026rsquo;s why they make a perfect couple and a tutorial on how to set up a Next.js app with a simple React user interface.\nReact and Next.js 1. Server-side Rendering (SSR): Next.js provides server-side rendering out of the box, which can improve the initial load time and search engine optimization (SEO) of your application, as opposed to a purely client-side React application.","title":"Building Personal Website With Next and React"},{"content":"Setting Up Hugo We need brew, go, git and hugo to build a Hugo website. I assume we already have bre and git are installed in our operating system.\nbrew install go go version brew install hugo hugo version hugo new site myspace code . Create Custom Layout Create a markdown file named as _index.md under content folder\n--- title: Home --- Hello World!!! and about.md with title: About then create default layout as baseof.html under /layouts/_default/ folder\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;{{.Page.Title}}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; {{ block \u0026#34;main\u0026#34; . }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; create two more html files under _default folder list.html for landing page and single.html for about page with below content\n{{ define \u0026#34;main\u0026#34;}} {{ .Content}} {{ end }} Stylesheet {{ $style := resources.Get \u0026#34;sass/main.scss\u0026#34; | resources.ToCSS | resources.Minify }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ $style.Permalink }}\u0026#34;\u0026gt; then create main.scss under assets/sass/ folder\nbody { width: 400px; margin: 0 auto; font-family: sans-serif; } Partials Create a file name as nav.html under /layoutes/partials/\n\u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/about/\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; then add below line in the baseof.html\n{{ partial \u0026#34;nav.html\u0026#34; }} we can also create meta partial as meta.html\n\u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;{{ print .Page.Title }}\u0026lt;/title\u0026gt; {{ $style := resources.Get \u0026#34;sass/main.scss\u0026#34; | resources.ToCSS | resources.Minify }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ $style.Permalink }}\u0026#34;\u0026gt; then add snippet in baseof.html\n{{ partial \u0026#34;meta.html\u0026#34; . }} That little . at the end is passing the context of the current page, which allows the partial to print out the current page’s title.\nTemplate \u0026lt;title\u0026gt;{{ .Params.title }} | {{ .Site.title }}\u0026lt;/title\u0026gt; \u0026lt;p\u0026gt;you can use double curly braces like this: {{ \u0026#34;Hello!\u0026#34; }}.\u0026lt;/p\u0026gt; {{ if isset .Params \u0026#34;title\u0026#34; }} \u0026lt;title\u0026gt;{{ .Params.title }}\u0026lt;/title\u0026gt; {{ else }} \u0026lt;title\u0026gt;{{ .Site.title }}\u0026lt;/title\u0026gt; {{ end }} {{ $favorite_food := \u0026#34;Gazelle\u0026#34; }} {{ $favorite_food }} {{ $best_friends := slice \u0026#34;pumbaa\u0026#34; \u0026#34;timon\u0026#34; \u0026#34;nala\u0026#34; \u0026#34;rafiki\u0026#34; }} \u0026lt;ul\u0026gt; {{ range $best_friends }} \u0026lt;li\u0026gt;{{ . }}\u0026lt;/li\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; to create conditiotonal templeting, enter params in config.toml or hugo.toml file\n[params] name = \u0026#39;Functor\u0026#39; then create a footer.html partial where footer will only seen if params is exist\n{{ with .Params.hide_footer }} \u0026lt;!-- No footer here! --\u0026gt; {{ else }} \u0026lt;footer\u0026gt; Website made by {{ .Site.Params.name }} in {{ now.Year }} \u0026lt;/footer\u0026gt; {{ end }} then add the partial in baseof.html\n{{ partial \u0026#34;footer.html\u0026#34; . }} we can hide footer in any html page(content) adding hide_footer just below title\nhide_footer: true Creating Blog cretate a file name as _index.md under /content/posts/\n--- title: Blog --- this markdown file will follow the rules of list.html unde /layouts/_default/ folder we can create our spesific layout if we also create list.html under /layout/posts folder\n{{ define \u0026#34;main\u0026#34;}} {{ .Content}} {{ end }} but we can also create single.html under /layout/posts/ folder so every post will follow the rules of single.html file\u0026rsquo;s rules\n{{ define \u0026#34;main\u0026#34;}} {{ .Content}} {{ end }} Using Available Layouts Above we can see basic hugo structure, alternatively we can use a theme to be able to see the site\nhugo new site myspace cd myspace git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke echo \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml hugo server we can also use git clone instead of fit submodule add\nyou can refer from https://gohugo.io/getting-started/quick-start/ echo \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml or directly place below code to hugo.toml before running hugo server\ntheme: [\u0026#34;PaperMod\u0026#34;] delete draft = true or assign false to add content and publish it(files in public folder)\nhugo new content posts/my-first-post.md hugo server hugo when we created new post in terminal, the current time automatically created but if we like to create a file with default fron matter, we can add default fron matter in default.md under archtypes folder so next time when we create a file with hugo new content comment, all the fron matter will be added.\ntitle : \u0026#39;{{ replace .File.ContentBaseName \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#39; date : {{ .Date }} draft : true author: [\u0026#34;Ozan\u0026#34;] Hugo.toml Hugo.toml is a configuration file where we can define navigation, profile module and more.\nPublishing Website to Netlify After finishing the development of vebsite we can create public directory with hugo on terminal. The public directory will contain all the html, css, javascript and static files for the website, however we will upload our files to netlify so we can delete the public directory.\nhugo rm -rf ./public/ git init touch .gitmodules We need to initialize git file to push our filese to github then later we will connect the github repository to netlify. We also need to create a .gitmodules to define the theme for git.\n[submodule \u0026#34;themes/PaperMod\u0026#34;] path = themes/PaperMod url = \u0026#34;htps://github.com/adityatelange/hugo-PaperMod.git\u0026#34; Then we can push our project to github.\nFinally we can go to Netlify and click add new site, then import existing project and then log in with desired third party application, and then we can search our project in github. You can refer here.\nbase directory = build command = hugo publish directory = public HUGO_VERSION = hugo verion in terminal\n","permalink":"http://localhost:1313/posts/how-to-build-hugo-website/","summary":"Setting Up Hugo We need brew, go, git and hugo to build a Hugo website. I assume we already have bre and git are installed in our operating system.\nbrew install go go version brew install hugo hugo version hugo new site myspace code . Create Custom Layout Create a markdown file named as _index.md under content folder\n--- title: Home --- Hello World!!! and about.md with title: About then create default layout as baseof.","title":"How to Build Hugo Website"}]